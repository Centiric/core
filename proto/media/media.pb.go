// media/proto/media.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.0--rc1
// source: proto/media/media.proto

// !!! RUST'A Ã–ZEL BU SATIRI KALDIRDIK VEYA YORUM SATIRI YAPTIK !!!
// option rust_package = "media";

package media

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AllocatePortRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllocatePortRequest) Reset() {
	*x = AllocatePortRequest{}
	mi := &file_proto_media_media_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocatePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocatePortRequest) ProtoMessage() {}

func (x *AllocatePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_media_media_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocatePortRequest.ProtoReflect.Descriptor instead.
func (*AllocatePortRequest) Descriptor() ([]byte, []int) {
	return file_proto_media_media_proto_rawDescGZIP(), []int{0}
}

type AllocatePortResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          uint32                 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllocatePortResponse) Reset() {
	*x = AllocatePortResponse{}
	mi := &file_proto_media_media_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocatePortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocatePortResponse) ProtoMessage() {}

func (x *AllocatePortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_media_media_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocatePortResponse.ProtoReflect.Descriptor instead.
func (*AllocatePortResponse) Descriptor() ([]byte, []int) {
	return file_proto_media_media_proto_rawDescGZIP(), []int{1}
}

func (x *AllocatePortResponse) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_proto_media_media_proto protoreflect.FileDescriptor

const file_proto_media_media_proto_rawDesc = "" +
	"\n" +
	"\x17proto/media/media.proto\x12\x05media\"\x15\n" +
	"\x13AllocatePortRequest\"*\n" +
	"\x14AllocatePortResponse\x12\x12\n" +
	"\x04port\x18\x01 \x01(\rR\x04port2W\n" +
	"\fMediaManager\x12G\n" +
	"\fAllocatePort\x12\x1a.media.AllocatePortRequest\x1a\x1b.media.AllocatePortResponseB$Z\"github.com/Centiric/core/gen/mediab\x06proto3"

var (
	file_proto_media_media_proto_rawDescOnce sync.Once
	file_proto_media_media_proto_rawDescData []byte
)

func file_proto_media_media_proto_rawDescGZIP() []byte {
	file_proto_media_media_proto_rawDescOnce.Do(func() {
		file_proto_media_media_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_media_media_proto_rawDesc), len(file_proto_media_media_proto_rawDesc)))
	})
	return file_proto_media_media_proto_rawDescData
}

var file_proto_media_media_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_media_media_proto_goTypes = []any{
	(*AllocatePortRequest)(nil),  // 0: media.AllocatePortRequest
	(*AllocatePortResponse)(nil), // 1: media.AllocatePortResponse
}
var file_proto_media_media_proto_depIdxs = []int32{
	0, // 0: media.MediaManager.AllocatePort:input_type -> media.AllocatePortRequest
	1, // 1: media.MediaManager.AllocatePort:output_type -> media.AllocatePortResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_media_media_proto_init() }
func file_proto_media_media_proto_init() {
	if File_proto_media_media_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_media_media_proto_rawDesc), len(file_proto_media_media_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_media_media_proto_goTypes,
		DependencyIndexes: file_proto_media_media_proto_depIdxs,
		MessageInfos:      file_proto_media_media_proto_msgTypes,
	}.Build()
	File_proto_media_media_proto = out.File
	file_proto_media_media_proto_goTypes = nil
	file_proto_media_media_proto_depIdxs = nil
}
